// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: reflection/v1/service.proto

package reflectionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReflectionServiceClient is the client API for ReflectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReflectionServiceClient interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	GetInfo(ctx context.Context, opts ...grpc.CallOption) (ReflectionService_GetInfoClient, error)
}

type reflectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReflectionServiceClient(cc grpc.ClientConnInterface) ReflectionServiceClient {
	return &reflectionServiceClient{cc}
}

func (c *reflectionServiceClient) GetInfo(ctx context.Context, opts ...grpc.CallOption) (ReflectionService_GetInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReflectionService_ServiceDesc.Streams[0], "/reflection.v1.ReflectionService/GetInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &reflectionServiceGetInfoClient{stream}
	return x, nil
}

type ReflectionService_GetInfoClient interface {
	Send(*GetInfoRequest) error
	Recv() (*GetInfoResponse, error)
	grpc.ClientStream
}

type reflectionServiceGetInfoClient struct {
	grpc.ClientStream
}

func (x *reflectionServiceGetInfoClient) Send(m *GetInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reflectionServiceGetInfoClient) Recv() (*GetInfoResponse, error) {
	m := new(GetInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReflectionServiceServer is the server API for ReflectionService service.
// All implementations should embed UnimplementedReflectionServiceServer
// for forward compatibility
type ReflectionServiceServer interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	GetInfo(ReflectionService_GetInfoServer) error
}

// UnimplementedReflectionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReflectionServiceServer struct {
}

func (UnimplementedReflectionServiceServer) GetInfo(ReflectionService_GetInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}

// UnsafeReflectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReflectionServiceServer will
// result in compilation errors.
type UnsafeReflectionServiceServer interface {
	mustEmbedUnimplementedReflectionServiceServer()
}

func RegisterReflectionServiceServer(s grpc.ServiceRegistrar, srv ReflectionServiceServer) {
	s.RegisterService(&ReflectionService_ServiceDesc, srv)
}

func _ReflectionService_GetInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReflectionServiceServer).GetInfo(&reflectionServiceGetInfoServer{stream})
}

type ReflectionService_GetInfoServer interface {
	Send(*GetInfoResponse) error
	Recv() (*GetInfoRequest, error)
	grpc.ServerStream
}

type reflectionServiceGetInfoServer struct {
	grpc.ServerStream
}

func (x *reflectionServiceGetInfoServer) Send(m *GetInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reflectionServiceGetInfoServer) Recv() (*GetInfoRequest, error) {
	m := new(GetInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReflectionService_ServiceDesc is the grpc.ServiceDesc for ReflectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReflectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reflection.v1.ReflectionService",
	HandlerType: (*ReflectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInfo",
			Handler:       _ReflectionService_GetInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reflection/v1/service.proto",
}
